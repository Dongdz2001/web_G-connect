import React, { useState, useEffect, useRef } from 'react';
import { setParamState } from 'store/listParamSlice';
import { useSelector, useDispatch } from 'react-redux';
import moment from 'moment';
import 'moment/locale/vi';
moment.locale('vi');
import "./TableTimeSheet.css";
import { Link } from "react-router-dom";
import { t } from "i18next";
import { Card } from "primereact/card";
import { mapPaginator } from 'shared/utils';
import SheetTable from "components/SheetTable-component/SheetTable";
import { GC_LICH_HANG_NGAYService  } from 'modules/GC_LICH_HANG_NGAY/GC_LICH_HANG_NGAYService';
import { DEFAULT_LIST_PARAM, DEFAULT_LIST_PAGE } from 'shared/app-settings';
import { getCurrentUserDefault  } from 'shared/utils/getCurrentUserDefault';
import TableBody from './TableBody';
function TableTimeSheet() {
  const currentDate = new Date();
  const month = currentDate.getMonth() + 1;
  const year = currentDate.getFullYear();
  // const daysInMonth = moment().daysInMonth();
  const headerCells = [];
  // const monthLabel = `${month < 10 ? "0" : ""}${month}`;
  const [monthLabel, setMonthLabel] = useState(`${month < 10 ? "0" : ""}${month}`);
  let daysInMonth = moment(`${year}-${monthLabel}`).daysInMonth();
  const [isToggle, setIsToggle] = useState(false);
  const [checkInTime, setCheckInTime] = useState(null);
  const [checkOutTime, setCheckOutTime] = useState(null);
  const [loading, setLoading] = useState(false);
  const  idUser = "3ff42af0-6e4b-41bd-3478-08db31bdc3ac";
  let intervalId = null;

  const setDaysInMonth = (monthLabel) => {
    const currentDate = new Date();
    const year = currentDate.getFullYear();
    daysInMonth = moment(`${year}-${monthLabel}`).daysInMonth();
  };
  const prevMonthTimeSheet = () => {
    let numMonth = parseInt(monthLabel, 10); // Sử dụng let thay vì const để có thể gán lại giá trị
    numMonth = numMonth > 1 ? numMonth - 1 : numMonth;
    const monthStr =  numMonth.toString().padStart(2, '0');
    setDaysInMonth(monthStr);
    setMonthLabel(monthStr); // Kiểm tra giá trị numMonth trước khi chuyển đổi thành chuỗi và thêm dấu '0' đầu chuỗi
  }
  const nextMountTimeSheet = () => {
    let numMonth = parseInt(monthLabel, 10); // Sử dụng let thay vì const để có thể gán lại giá trị
    numMonth = numMonth <= 11 ? numMonth + 1 : numMonth;
    const monthStr =  numMonth.toString().padStart(2, '0');
    setDaysInMonth(monthStr);
    setMonthLabel(monthStr); // Kiểm tra giá trị numMonth trước khi chuyển đổi thành chuỗi và thêm dấu '0' đầu chuỗi
  }
  const handleSetLoading = (newState) => {
    setLoading(newState);
  };

  const handleCheckIn = () => {
    if (checkInTime !== null) {
      return;
    }
    
    const currentTime = new Date().toLocaleTimeString("en-US", {hour12: false, hour: "2-digit", minute: "2-digit" });
    setCheckInTime(currentTime);
  };
  
  
  const handleCheckOut = () => {
    if (checkOutTime !== null) {
      return;
    }
    
    const currentTime = new Date().toLocaleTimeString("en-US", {hour12: false, hour: "2-digit", minute: "2-digit"});
    if (checkInTime) {
      setCheckOutTime(currentTime);
    }
  };
  
  const toggle = () => {
    if (!isToggle) {
      document.body.classList.add("sidebar-collapse");
    } else {
      document.body.classList.remove("sidebar-collapse");
    }
    setIsToggle(!isToggle);
    // document.body.classList.remove('overflow-y-disable');
  };
  for (let i = 1; i <= daysInMonth; i++) {
    const dayOfMonth = `${i < 10 ? "0" : ""}${i}`;
    const isBeforeToday = new Date(year, month - 1, i) < currentDate;
    if (isBeforeToday) {
      headerCells.push(
        <th key={i} className="thsheet ths" >
          <p style={{  marginTop: "20px" }}> {dayOfMonth}/{monthLabel} </p>
        </th>
      );
    } else {
      headerCells.push(
        <th key={i} className="thsheet ths" >
          <span style={{ color: "gray" }}>
          <p style={{  marginTop: "20px" }}> {dayOfMonth}/{monthLabel} </p>
          </span>
        </th>
      );
    }
  }

  return (
    <div className=" content-wrapper" >
      <aside className="main-sidebar main-sidebar-custom sidebar-dark-primary elevation-4">
        <div className="sidebar  d-flex flex-column align-items-center align-items-sm-start pt-2 pl-0 text-white min-vh-100">
          <ul
            className="nav nav-pills nav-sidebar  flex-column mb-sm-auto mb-0 align-items-center align-items-sm-start"
            id="menu1"
          >
            <li className="nav-item">
              <Link to={{ pathname: "/overview" }} className="nav-link">
                <i className="nav-icon fas fa-tachometer-alt" />
                <p>{t("rbkey_ct_ovrvw", "Tổng quan")}</p>
              </Link>

              <ul
                style={{ display: "none" }}
                className="collapse nav flex-column"
                id="tongquan"
                data-bs-parent="#menu1"
              ></ul>
            </li>

            <li className="nav-item">
              <a href="/demo/lms-container" className="nav-link">
                <i className="nav-icon far fa-plus-square" />
                <p>Demo</p>
              </a>
            </li>

            <li className="nav-item">
              <a href="/admin/ClientCorsOrigins" className="nav-link">
                <i className="nav-icon far fa-plus-square" />
                <p>LMS Admin Vị trí </p>
              </a>
            </li>
            <li className="nav-item">
              <a href="/table-component/TableTimeSheet" className="nav-link">
                <i className="nav-icon far fa-plus-square" />
                <p> Lịch Ngày TimeSheet </p>
              </a>
            </li>
            <li className="nav-item">
                <Link className="nav-link" to={"/issues/issue/" + getCurrentUserDefault().id}>
                  <i className="nav-icon far fa-plus-square" />
                  <p>{" Các vấn đề cần giải quyết"}</p>
                </Link>
              </li>
          </ul>
        </div>
      </aside>
      <div>
        <nav className="main-header navbar navbar-expand navbar-white navbar-light ml-0">
          <ul className="navbar-nav">
            <li className="nav-item">
              <a className="nav-link" onClick={toggle}>
                <i className="fas fa-bars"></i>
              </a>
            </li>
            <li className="nav-item d-none d-sm-inline-block">
              <a className="nav-link" href="/">
                Home
              </a>
            </li>
            <li className="nav-item d-none d-sm-inline-block">
              <a href="#" className="nav-link">
                Contact
              </a>
            </li>
          </ul>
          <ul className="navbar-nav ml-auto">
            <li className="nav-item dropdown">
              <a
                className="nav-link"
                data-toggle="dropdown"
                href="/login"
                title="logout"
                onClick={() => {
                  dispatch(removeToken());
                }}
              >
                <i className="pi pi-sign-out" />
              </a>
            </li>
          </ul>
        </nav>
     
        <Card >
          <div className='titleTimeSheet'>
          <h2 className='titleSheetTable'> Danh Sách Time Sheet </h2>
          <div style={{display: "flex" , marginBottom: "10px", justifyContent: 'center' }} >
            <button className='button-prev' onClick={() => prevMonthTimeSheet()}> {'<<<'} </button>
            <div style={{margin: "10px 20px"}}> {`${monthLabel}/${year}`} </div>
            <button className='button-next' onClick={() => nextMountTimeSheet()} > {'>>>'} </button>
          </div>
          <div className="button-container">
          <button className="check-in-button" onClick={() => handleCheckIn()} >Check-in</button>
          <button className="log-time-button"  >Log time</button>
          <button className="check-out-button" onClick={() => handleCheckOut()}>Check-out</button>
          </div>
          </div>
         
          
        <div style={{ overflowX: "auto" }} >
          <table className={`tablesheet table ${loading ? 'table-loading' : ''}`}>
            <TableHeader
              daysInMonth={daysInMonth}
              headerCells={headerCells}
              currentDate={currentDate}
            />
            <TableBody 
                daysInMonth={daysInMonth}
                monthlabel={monthLabel}
                yearr = {year} 
                currentDate={currentDate}  
                checkInTime={checkInTime} 
                checkOutTime={checkOutTime} 
                idUser={idUser} 
                loading={loading} 
                loadingFuc={handleSetLoading}/>
          </table>

        </div>
        </Card>
        <SheetTable/>
      </div>
    </div>
  );
}

function TableHeader(props) {
  const { headerCells } = props;

  return (
    <thead className="theadsheet">
      <tr className="trsheet">
        {/* <th className="thsheet">Edit</th> */}
        <th className="thsheet"> <p style={{marginTop: "20px" }}>STT</p> </th>
        <th className="thsheet"> <p style={{widthMax: "200px" , marginTop: "20px" }}> Tên Nhân Viên </p></th>
        <th className="thpositon thsheet"> <p style={{width: "100px" , marginTop: "20px" }}> Công việc </p> </th>
        {headerCells}
      </tr>
    </thead>
  );
}


export default TableTimeSheet;

          // <button className="edit-button"><i className="fas fa-edit"></i></button>
           // return <tbody>{RowsElements}</tbody>;